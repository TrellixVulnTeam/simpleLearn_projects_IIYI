{"version":3,"file":"ng-password-validator.directive.d.ts","sources":["ng-password-validator.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, SimpleChange } from \"@angular/core\";\nimport { Subscription } from \"rxjs\";\nimport { DataService } from \"./data.service\";\nimport { IElementPosition, IPosition, NgPasswordValidatorOptions } from \"./ng-password-validator.interface\";\nexport interface HostComponent {\n    data: any;\n    show: boolean;\n    close: boolean;\n    events: any;\n}\nexport declare class NgPasswordValidatorDirective implements OnDestroy, OnChanges {\n    private initOptions;\n    private elementRef;\n    private componentFactoryResolver;\n    private appRef;\n    private dataService;\n    private injector;\n    regExpForLength: RegExp;\n    regExpForOneUpper: RegExp;\n    regExpForOneLower: RegExp;\n    regExpForOneDigit: RegExp;\n    regExpForSpecialCharacters: RegExp;\n    isValid: boolean;\n    inputValue: string;\n    componentRef: any;\n    elementPosition: IElementPosition;\n    passwordOptions: NgPasswordValidatorOptions;\n    componentSubscribe: Subscription;\n    set optionsInput(value: NgPasswordValidatorOptions);\n    popup: NgPasswordValidatorOptions;\n    placement: string;\n    zIndex: number;\n    animationDuration: number;\n    customClass: string;\n    shadow: boolean;\n    theme: \"basic\" | \"pro\";\n    offset: number;\n    width: number;\n    maxWidth: number;\n    position: IPosition;\n    heading: string;\n    successMessage: string;\n    events: EventEmitter<any>;\n    valid: EventEmitter<boolean>;\n    constructor(initOptions: any, elementRef: ElementRef, componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, dataService: DataService, injector: Injector);\n    get options(): NgPasswordValidatorOptions;\n    get isPopupDestroyed(): boolean;\n    /**\n     * Get popup position\n     *\n     * @readonly\n     * @type {(IElementPosition | IPosition)}\n     * @memberof NgPasswordValidatorDirective\n     */\n    get popupPosition(): IElementPosition | IPosition;\n    /**\n     * Focus in input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    onMouseEnter(value: any): void;\n    /**\n     * Update password options\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    updatePasswordOptions(): void;\n    /**\n     * Focus out of input field\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    onMouseLeave(): void;\n    /**\n     * Input field value\n     *\n     * @param {string} value\n     * @memberof NgPasswordValidatorDirective\n     */\n    onInput(value: string): void;\n    /**\n     * On input change\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnChanges(changes: {\n        popup: SimpleChange;\n    }): void;\n    /**\n     * Destroy the pop up and unsubscribe to release the memory\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    ngOnDestroy(): void;\n    /**\n     * Deep merge objects\n     *\n     * @param {NgPasswordValidatorOptions} target\n     * @param {NgPasswordValidatorOptions} source\n     * @returns {NgPasswordValidatorOptions}\n     * @memberof NgPasswordValidatorDirective\n     */\n    deepMerge(target: NgPasswordValidatorOptions, source: NgPasswordValidatorOptions): NgPasswordValidatorOptions;\n    /**\n     * Create password regex\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPasswordRegex(): void;\n    /**\n     * Check password if valid or not\n     *\n     * @param {string} inputValue\n     * @memberof NgPasswordValidatorDirective\n     */\n    checkPassword(inputValue: string): void;\n    /**\n     * Get properties\n     *\n     * @param {{ popup: SimpleChange }} changes\n     * @returns {{ popup: any }}\n     * @memberof NgPasswordValidatorDirective\n     */\n    getProperties(changes: {\n        popup: SimpleChange;\n    }): {\n        popup: any;\n    };\n    /**\n     * Get element position\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    getElementPosition(): void;\n    /**\n     * Create Popup\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    createPopup(): void;\n    /**\n     * Destroy Popup\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    destroyPopup(): void;\n    /**\n     * Show popup window\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    showPopupElem(): void;\n    /**\n     * Hide popup window\n     *\n     * @returns {void}\n     * @memberof NgPasswordValidatorDirective\n     */\n    hidePopup(): void;\n    /**\n     * Append created popup window to body\n     *\n     * @param {*} component\n     * @memberof NgPasswordValidatorDirective\n     */\n    appendComponentToBody(component: any): void;\n    /**\n     * Reset/switching back to default options\n     *\n     * @param {NgPasswordValidatorOptions} defaultOption\n     * @param {{ popup: SimpleChange }} options\n     * @memberof NgPasswordValidatorDirective\n     */\n    applyOptionsDefault(options: {\n        popup: SimpleChange;\n    }, defaultOption: NgPasswordValidatorOptions): void;\n    /**\n     * Handle events\n     *\n     * @param {*} event\n     * @memberof NgPasswordValidatorDirective\n     */\n    handleEvents(event: any): void;\n    /**\n     * It creates popup window to show password requirement\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    show(): void;\n    /**\n     * Hide/Destroys popup windows\n     *\n     * @memberof NgPasswordValidatorDirective\n     */\n    hide(): void;\n}\n"]}